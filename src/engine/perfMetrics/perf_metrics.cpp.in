#include <perf_metrics.h>

#include <fstream>
#include <iostream>
#include <regex>

static std::string get_stript() {
    return R"scptr(<script>@JS_FILE@</script>)scptr";
}

static std::string get_css() {
    return R"cscscs(<style>@CSS_FILE@</style>)cscscs";
}

static std::string get_html() {
    return R"HTMLM(@HTML_FILE@)HTMLM";
}

void generate_capture_file(const fs::path& target, const ISerializable* captureObj) {
    if (!fs::exists(fs::path{target}.parent_path()))
        fs::create_directories(fs::path{target}.parent_path());
    std::regex cssRegex("<link\\s+rel=\"stylesheet\"\\s+href=\"[^\"]*\"\\s*>");
    std::regex jsRegex("<script\\s+src=\"[^\"]*\"\\s*><\\/script>");
    std::regex captureDataRegex("captureData\\s*=\\s*\\{.*\\};");
    json jsonObj;
    captureObj->writeJson(jsonObj);
    std::stringstream ss;
    ss << std::move(jsonObj);
    std::string script =
      std::regex_replace(get_stript(), captureDataRegex, "captureData = " + std::move(ss).str());
    std::string css = get_css();
    std::string html = std::regex_replace(std::regex_replace(get_html(), cssRegex, std::move(css)),
                                          jsRegex, std::move(script));
    std::ofstream out(target.string().c_str());
    out << std::move(html);
}
