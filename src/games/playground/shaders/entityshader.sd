
include {
    aglobal;
    threed;
    forwardshading;
    basicshape;
}

descriptor {
    variants {
    }
    resources {
        vec3 entityAlbedo;
        float specularStrength;
        float mandelbrotQuality;
    }
}

stages {
    ps {
        entry = main;
        use entityAlbedo;
        use specularStrength;
        use mandelbrotQuality;
    }
    vs {
        entry = main;
    }
}

vs {
    layout(location = 0) out vec3 worldPos;
#if renderPass == color_pass
    layout(location = 1) out vec3 vAlbedo;
    layout(location = 2) out vec3 normal;
    layout(location = 3) out vec4 tc_specular_mandelbrot;
    layout(location = 4) out vec3 eyeToWorld;
#endif
    void main() {
        VertexData vertexData = getVertexData(gl_VertexIndex);
        worldPos = getWorldSpacePoint(vertexData.pos).xyz;
#if renderPass == color_pass
        vAlbedo = PushConstants.entityAlbedo;
        normal = getWorldSpaceDirection(vertexData.normal).xyz;
        tc_specular_mandelbrot = vec4(vertexData.tc, PushConstants.specularStrength, PushConstants.mandelbrotQuality);
        eyeToWorld = worldPos - PushConstants.eyePos;
#endif
        gl_Position = worldToScreenSpacePoint(worldPos);
    }
}

ps {
    layout(location = 0) in vec3 worldPos;
#if renderPass == color_pass
    layout(location = 1) in vec3 vAlbedo;
    layout(location = 2) in vec3 normal;
    layout(location = 3) in vec4 tc_specular_mandelbrot;
    layout(location = 4) in vec3 eyeToWorld;

    void main() {
        outColor = lightToColor(shadePixel(normalize(eyeToWorld), worldPos, normalize(normal), vAlbedo, tc_specular_mandelbrot.z));
    }
#else
    void main() {
        outColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
#endif

}
