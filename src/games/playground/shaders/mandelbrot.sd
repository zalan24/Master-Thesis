
include {
    global;
}

descriptor {
    variants {
        Quality: quality1, quality2, quality3, quality4, quality5, quality6, quality7, quality8, quality9, quality10;
    }
    resources {
    }
}

stages {
    states {
        cull = none;
    }
    ps {
        entry = main;
    }
    vs {
        entry = main;
    }
    attachments {
        outColor {
            type = output;
            channels = rgba;
            location = 0;
        }
    }
}

vs {
    vec2 positions[6] = vec2[](
        vec2(-1.0, -1.0),
        vec2(-1.0, 1.0),
        vec2(1.0, -1.0),
        vec2(-1.0, 1.0),
        vec2(1.0, 1.0),
        vec2(1.0, -1.0)
    );

    layout(location = 0) out vec2 texcoord;

    void main() {
        // debugPrintfEXT("hello");
        gl_Position = vec4(positions[gl_VertexIndex], 0.0, 1.0);
        texcoord = gl_Position.xy;
    }
}

ps {
    // layout(location = 0) out vec4 outColor;

    layout(location = 0) in vec2 texcoord;

    void main() {
        uint quality = 1;
        #if Quality == quality1
            quality = 1;
        #elif Quality == quality2
            quality = 2;
        #elif Quality == quality3
            quality = 3;
        #elif Quality == quality4
            quality = 4;
        #elif Quality == quality5
            quality = 5;
        #elif Quality == quality6
            quality = 6;
        #elif Quality == quality7
            quality = 7;
        #elif Quality == quality8
            quality = 8;
        #elif Quality == quality9
            quality = 9;
        #elif Quality == quality10
            quality = 10;
        #endif
        uint iterations = 100 * quality * quality;
        vec2 c = texcoord * 2.0;
        c.x -= 1;
        c.y *= 0.5;
        vec2 x = vec2(0.0, 0.0);
        uint exit = 0;
        for (uint i = 0; i < iterations; ++i) {
            x = vec2(x.x*x.x - x.y*x.y, 2.0 * x.x*x.y) + c;
            if (length(x) > 2.0)
            {
                exit = i+1;
                break;
            }
        }
        vec3 exitColor = vec3(0.0, 0.0, 0.0);
        vec3 midColor = vec3(1.0, 0.0, 0.0);
        vec3 peakColor = vec3(1.0, 1.0, 1.0);
        if (exit == 0) {
            outColor = vec4(exitColor, 1.0);
        } else {
            float f = log(float(exit)) / log(float(iterations));
            if (f < 0.5) {
                f = f*2;
                outColor = mix(vec4(exitColor, 1.0), vec4(midColor, 1.0), f);
            } else {
                f = (f-0.5)*2;
                outColor = mix(vec4(midColor, 1.0), vec4(peakColor, 1.0), f);
            }
        }
    }
}
