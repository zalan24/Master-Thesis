include {
    aglobal;
    fullscreen;
}

descriptor {
    variants {
    }
    resources {
        vec3 exitColor;
        vec3 midColor;
        vec3 peakColor;
        float iterations;
    }
}

stages {
    ps {
        entry = main;
        use exitColor;
        use midColor;
        use peakColor;
        use iterations;
    }
}

ps {
    void main() {
        uint iterations = uint(round(max(PushConstants.iterations, 0.0)));
        vec2 c = screenpos * 2.0;
        c.x -= 1;
        c.y *= 0.5;
        vec2 x = vec2(0.0, 0.0);
        uint exit = 0;
        for (uint i = 0; i < iterations; ++i) {
            x = vec2(x.x*x.x - x.y*x.y, 2.0 * x.x*x.y) + c;
            if (length(x) > 2.0)
            {
                exit = i+1;
                break;
            }
        }
        if (exit == 0) {
            outColor = vec4(PushConstants.exitColor, 1.0);
        } else {
            float f = log(float(exit)) / log(float(iterations));
            if (f < 0.5) {
                f = f*2;
                outColor = mix(vec4(PushConstants.exitColor, 1.0), vec4(PushConstants.midColor, 1.0), f);
            } else {
                f = (f-0.5)*2;
                outColor = mix(vec4(PushConstants.midColor, 1.0), vec4(PushConstants.peakColor, 1.0), f);
            }
        }
    }
}
